<!DOCTYPE html>

<!--
  COLLABORATORS: NONE
  
-->
<html>

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<title>Checkerboard</title>

<!-- Load style sheets -->
<link rel="stylesheet" type="text/css" href="mainLayout.css" />

<!-- Load any supplemental Javascript libraries here -->
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script type="text/javascript" src="checker.js"></script>
<script type="text/javascript" src="boardEvent.js"></script>
<script type="text/javascript" src="board.js"></script>
<script type="text/javascript" src="rules.js"></script>
<script type="text/javascript" src="draw.js"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js"></script>



<script type="text/javascript">

//This script extracts parameters from the URL
//from jquery-howto.blogspot.com

    $.extend({
        getUrlVars : function() {
            var vars = [], hash;
            var hashes = window.location.href.slice(
                    window.location.href.indexOf('?') + 1).split('&');
            for ( var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('=');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
            }
            return vars;
        },
        getUrlVar : function(name) {
            return $.getUrlVars()[name];
        }
    });

    var DEFAULT_BOARD_SIZE = 8;
	  var BOARD_SIZE = DEFAULT_BOARD_SIZE;
	  var box_dim = 400/DEFAULT_BOARD_SIZE; //TODO abstract 400

    //data model
    var board;
    var rules;
    var whoseTurn = "black";	//black goes first
    var ramifications = null; //undo cache starts blank

    var directionOf = function(color) {
      if (color == "black") {
        return -1;
      }
      return 1;
    }

    // Fill in this function to toggle the display for whose turn
    // The color parameter should be either "black" or "red"
var toggleTurn = function(color) {
		if (whoseTurn == "black"){
				whoseTurn = "red"; 
				document.getElementById("currTurn").innerHTML = "Red Turn";
				return;
		}
		whoseTurn = "black";
		document.getElementById("currTurn").innerHTML = "Black Turn";
    }


    // This allows the Javascript code inside this block to only run when the page
    // has finished loading in the browser.
    $(document).ready(function() {

        if ($.getUrlVar('size') && $.getUrlVar('size') >= 6) {
            board = new Board($.getUrlVar('size'));
        } else {
            board = new Board(DEFAULT_BOARD_SIZE);
        }
				//draw the board we've created
				draw_checkerboard();

	rules = new Rules(board);
	
     	// Your code here

        board.addEventListener('add',function (e) {
    		// Your code here
    	},true);

    	board.addEventListener('move',function (e) {
					console.log(e);
					var move = e.details;
					drawArrow(move.fromRow, move.fromCol, move.toRow, move.toCol);
    	},true);


        board.addEventListener('remove', function(e) {
    		// Your code here
        }, true);

        board.addEventListener('promote',function (e) {
    		// Your code here
    	},true);

        
        $("#btnNewGame").click(function(evt) {
            board.prepareNewGame();
						draw_checkerboard();
						draw_all_pieces();

        });

        $("#btnAutoMove").click(function(evt) {
          var playerColor = whoseTurn;
          var playerDirection = directionOf(playerColor);
          var result = rules.makeRandomMove(playerColor, playerDirection);
          if (result != null) {
            toggleTurn();
          }
						draw_checkerboard();
						draw_all_pieces();

        });

        board.prepareNewGame();
				draw_all_pieces();

				
//draw checkerboard
function draw_checkerboard(){

		var canvas = document.getElementById("canvasBoard");

		if (canvas && canvas.getContext){
				var context = canvas.getContext("2d");

				if (context){

						//fill in grey boxes
						for (var row=0; row<DEFAULT_BOARD_SIZE; row++){
								for (var col=0; col<DEFAULT_BOARD_SIZE; col++){
										if (((row + col)%2)==0){
												continue; //skip this box, it's white
										}
										context.fillStyle = "gray";
										context.fillRect(row*box_dim, col*box_dim, box_dim, box_dim);
								}
						}
				}
		}
}





//draw board's entire current state 
//assign id to each checker image. 
function draw_all_pieces(){
		console.log("in draw_all_pieces");
		 var canvas = document.getElementById("canvasBoard");

		 if (canvas && canvas.getContext){
				 var context = canvas.getContext("2d");

				 if (context){
						 var allCurrCheckers = board.getAllCheckers();
						 for (var i=0; i<allCurrCheckers.length; i++){
								 var currChecker = allCurrCheckers[i];
								 
								 var nextPieceImg = setupNextPiece(currChecker, i);

								 if (currChecker.color == "black"){ //BLACK
										 if (currChecker.isKing){
												 nextPieceImg.src = 'graphics/black-king.png';
										 }
										 else{
												 nextPieceImg.src = 'graphics/black-piece.png';
										 }
								 }
								 else{ //RED
										 if (currChecker.isKing){
												 nextPieceImg.src = 'graphics/red-king.png';
										 }
										 else{
												 nextPieceImg.src = 'graphics/red-piece.png';
										 }
								 }

								 //add newPieceImg to div, delete pre-existing elt if applicable
								 var oldPiece = document.getElementById(nextPieceImg.id);
								 if (oldPiece){
										 allBoardPieces.removeChild(oldPiece);
								 }
//								 var newPiece = $("<div/>", {"class": "singlePiece"});
	//							 allBoardPiece.appendChild(newPiece);
																									 
								 allBoardPieces.appendChild(nextPieceImg);
						 }
				 }
		 }
}


function setupNextPiece(currChecker, i){
		var nextPieceImg = new Image();

		nextPieceImg.id = "checker" + i;
		nextPieceImg.className = "checkerPiece";

		//position
		nextPieceImg.style.position = "absolute";
		nextPieceImg.style.height = box_dim;
		nextPieceImg.style.width = box_dim;

		nextPieceImg.style.top = (box_dim * currChecker.row) + "px";
		nextPieceImg.style.left = (box_dim * currChecker.col) + "px";

		//make checker draggable
		var startPos;
		var stopPos;
		$(nextPieceImg).draggable({
				appendTo: "#canvasBoard",
				//save the startPos of the checker, in case of an "invalid" drag
				start: function(event, nextPieceImg){
						console.log("e" + event);
						startPos = $(this).position();
						console.log(startPos);
				},
				
				stop: function(event, nextPieceImg){
						stopPos = $(this).position();
						console.log(stopPos);
						dragChecker(nextPieceImg, startPos, stopPos);
				}
		});

		return nextPieceImg;
}

				function dragChecker(checkerPiece, startPos, stopPos){
						
						var oldRow = Math.round(startPos.top/box_dim);
						var oldCol = Math.round(startPos.left/box_dim);
						console.log("oldRow and oldCol" + oldRow + "," + oldCol);
						console.log("pre-floor: " + stopPos.top/box_dim + "," + stopPos.left/box_dim);
						var newRow = Math.round(stopPos.top/box_dim);
						var newCol = Math.round(stopPos.left/box_dim);
						console.log("newRow and newCol" + newRow + "," + newCol);
						
						var originalChecker;
						var allCurrCheckers = board.getAllCheckers();
						for (var i=0; i<allCurrCheckers.length; i++){
								//find original checker row/col before it was dragged
								if (allCurrCheckers[i].row==oldRow &&
										allCurrCheckers[i].col==oldCol){
										originalChecker = allCurrCheckers[i];
								}
								//see if new position is occupied
								if (allCurrCheckers[i].row==newRow &&
										allCurrCheckers[i].col==newCol){
										//move checker back to its original position
										draw_checkerboard();
										draw_all_pieces();
										return
								}
						}

						//MOVE
						//check that move is valid (that it's the right turn)

						if ((whoseTurn=="black" && originalChecker.color=="black") ||
								(whoseTurn=="red" && originalChecker.color=="red")){
								console.log("making a move");
								var originalCheckers = board.getAllCheckers();
								
								console.log("oldPos: " + oldRow + "," + oldCol +
														"newPos: " + newRow + "," + newCol)
								if (whoseTurn=="black"){
										ramifications = rules.makeMove(originalChecker, -1, -1, newRow, newCol);
								}
								else{
										ramifications = rules.makeMove(originalChecker, 1, 1, newRow, newCol);
								}
								var finalCheckers = board.getAllCheckers();
								draw_checkerboard();
								draw_all_pieces();

								
								if (originalChecker.row==newRow && originalChecker.col==newCol){
										console.log("Turn Done");
										//next player's turn
										toggleTurn();
								}

						}
						else{
								console.log("not your turn");
								draw_checkerboard();
								draw_all_pieces();

								$(checkerPiece).position.left = startPos.left;
								$(checkerPiece).position.top = startPos.top;
								//don't move, put the checker back!
						}

				}
						

function drawArrow(fromRow, fromCol, toRow, toCol){
		console.log(fromRow, fromCol, toRow, toCol);
		var offset = -25;
		 var canvas = document.getElementById("canvasStrokes");

		 if (canvas && canvas.getContext){
				 var context = canvas.getContext("2d");
				 var arrowStartX = fromCol*box_dim-offset;
				 var arrowStartY = fromRow*box_dim-offset;
				 var arrowEndX = toCol*box_dim-offset;
				 var arrowEndY = toRow*box_dim-offset;

				 if (context){
						 //clear 
						 context.clearRect(0, 0, 400, 400);

						 //paint next arrow
						 context.beginPath();
						 //shaft
						 context.moveTo(arrowStartX, arrowStartY);
						 context.lineTo(arrowEndX, arrowEndY);
						 
						 //head
						 var lengthHead = 5;
						 var angle = Math.atan2(arrowEndY-arrowStartY, arrowEndX-arrowStartX);
						 
						 context.lineTo(arrowEndX-lengthHead*Math.cos(angle-Math.PI/6), 
														arrowEndY-lengthHead*Math.sin(angle-Math.PI/6));
						 
						 context.moveTo(arrowEndX, arrowEndY);

						 context.lineTo(arrowEndX-lengthHead*Math.cos(angle+Math.PI/6),arrowEndY-
														lengthHead*Math.sin(angle+Math.PI/6));
						 

						 context.strokeStyle = '#FFE303';
						 context.lineWidth = 2;
						 context.stroke();
				}
		 }
}




//mouse input handling
				function handleDragStart(e){
						dragSrcEl = this;
						e.dataTransfer.effectAllowed = 'move';
						e.dataTransfer.setData('text/html', this.innerHTML);
				}

				function handleDragOver(e){
						console.log(e.target.style.top);
						e.target.style.top = 10;
						e.target.style.left = 10;
						checker11.style.top = 10;

		//				e.dataTransfer.dropEffect = 'move'; //DataTransfer
						return false;
				}

				function handleDragEnter(e){
						console.log(e.target);
//						this.classList.add('over');
				}
				
				function handleDragLeave(e){
	//					this.classList.remove('over'
				}

				function handleDrop(e){
	//					console.log(e.target);
						if (dragSrcEl != this){ //dropping the same place we're dragging
						}
						

				}
				
				function handleDragEnd(e){
						
				}
		});


</script>

</head>

<body>

<table id="mainTable">
    <tr>
        <td id="navigation">
          <table>
			  <tr><td id="currTurn" name="currTurn" style="background-color:black; color:white; text-align:center">Black Turn

		</td></tr>
              <tr><td><input id="btnNewGame" type="button" name="new" value="New Game"/></td></tr>
              <tr><td><input id="btnAutoMove" type="button" name="new" value="Auto Move"/></td></tr>
				<tr><td><input id="btnUndo" type="button" name="new" value="Undo"/></td></tr>
				<tr><td><input id="btnRedo" type="button" name="new" value="Redo"/></td></tr>
							
		

            </table>
        </td>

        <td id="content">

		<div id="allBoardPieces" style="position:absolute; width:400px; height:400px;">

		<div class="checkerPiece" style="position:absolute;" draggable="true"></div>
					<canvas id="canvasBoard" style="border-style:solid; border-color:gray; border-width:2px;" width="400" height="400" >
					</canvas>
	
				<canvas id="canvasStrokes" width="400" height="400">
						</canvas>

				<canvas id="canvasAnimatePieces" width="400" height="400">
		
		

	</div>

            
        </td>
    </tr>

   </table>

</body>

</html>
